<templateSet group="user">
  <template name="printme" value="print('-zlog- $text$');" description="" toReformat="true" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="jsonclass" value="class GameQueryGameData {&#10;  String? id;&#10;  String? assortName;&#10;  String? assortSort;&#10;&#10;  GameQueryGameData({this.id,&#10;    this.assortName,&#10;    this.assortSort});&#10;&#10;  GameQueryGameData.fromJson(Map&lt;String, dynamic&gt; json) {&#10;    id = json['id'] is String ? json['id'] : '${json['id']}';&#10;    assortName = json['assortName'];&#10;    assortSort = json['assortSort'] is String ? json['assortSort'] : '${json['assortSort']}';&#10;  }&#10;&#10;  Map&lt;String, dynamic&gt; toJson() {&#10;    final Map&lt;String, dynamic&gt; data = new Map&lt;String, dynamic&gt;();&#10;    data['id'] = this.id;&#10;    data['assortName'] = this.assortName;&#10;    data['assortSort'] = this.assortSort;&#10;    return data;&#10;  }&#10;}" description="自定义对象解析" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="getclass" value="$class$ $name$ = Get.find&lt;$class$&gt;(); " description="获取某个类实例" toReformat="true" toShortenFQNames="true">
    <variable name="class" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="extensiontemplate" value="extension $extensionName$ on $String$ {&#10;  int parseInt() {&#10;    return int.parse(this);&#10;  }&#10;}" description="类扩展" toReformat="true" toShortenFQNames="true">
    <variable name="extensionName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="String" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="userdefault" value="import 'package:shared_preferences/shared_preferences.dart';&#10;SharedPreferences prefs = await SharedPreferences.getInstance();&#10;List&lt;String&gt;? lastList =&#10;        await HomeGameManager.instance.getUserGameSortFromSave();&#10;          Future&lt;List&lt;String&gt;?&gt; getUserGameSortFromSave() async {&#10;    if (_uidEmpty()) {&#10;      return null;&#10;    }&#10;&#10;    SharedPreferences prefs = await SharedPreferences.getInstance();&#10;    List&lt;String&gt;? list = prefs.getStringList(_findUid());&#10;    return list;&#10;  }&#10;//保存数据&#10;void saveMethodName() async {&#10;  SharedPreferences prefs = await _prefs;&#10;  prefs.setString(&quot;strKey&quot;, &quot;strValue&quot;);&#10;  prefs.setInt(&quot;intKey&quot;, &quot;intValue&quot;);&#10;}&#10;//获取数据&#10;void initFromCache() async {&#10;  SharedPreferences prefs = await _prefs;&#10;  String strValue = prefs.getString(&quot;strKey&quot;);&#10;  int intValue = prefs.getInt(&quot;intKey&quot;);&#10;}&#10;//从缓存中获取信息填充&#10;  void initFromCache() async {&#10;    final SharedPreferences prefs = await _prefs;&#10;    final nickname = prefs.getString(&quot;nickname&quot;);&#10;    final mt = prefs.getBool(&quot;mt&quot;);&#10;    final ds = prefs.getBool(&quot;ds&quot;);&#10;    final ltb = prefs.getBool(&quot;ltb&quot;);&#10;    &#10;    //获取到缓存中的值后，使用setState更新界面信息&#10;    setState(() {&#10;      controller.text = (nickname == null ? &quot;&quot; : nickname);&#10;      this.mt = (mt == null ? false : mt);&#10;      this.ds = (ds == null ? false : ds);&#10;      this.ltb = (ltb == null ? false : ltb);&#10;    });&#10;  }&#10;&#10;  //保存界面的输入选择信息&#10;  void saveInfo(String nickname) async {&#10;    final SharedPreferences prefs = await _prefs;&#10;    prefs.setString(&quot;nickname&quot;, nickname);&#10;    prefs.setBool(&quot;mt&quot;, mt);&#10;    prefs.setBool(&quot;ds&quot;, ds);&#10;    prefs.setBool(&quot;ltb&quot;, ltb);&#10;  }&#10;" description="持久存储" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="importget" value="import 'package:get/get.dart';" description="引入get框架" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="importauth" value="import 'package:ob_app/service/auth_service.dart';" description="引入用户单例" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="importgamemanager" value="import 'package:ob_app/modules/home/components/controller/home_game_manager.dart';" description="引入游戏管理单例" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="map用法" value="List&lt;String&gt; sortIds =&#10;        gameTypesForSort.map((element) =&gt; element['id'].toString()).toList();" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="mapFromlist创建" value="Map&lt;String, dynamic&gt; dataMap = {&#10;  for (int i = 0; i &lt; model.data.length; i++)&#10;    model.data[i]['id']: model.data[i]&#10;};&#10;letters = [&#10;  for (int number in numbers) mappings[number]&#10;];" description="list转map" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="delay" value="await Future.delayed(Duration(milliseconds: 20));&#10;Future.delayed(Duration(milliseconds: 100), () {&#10;    openWeb(gameCode, url, gameName, gameId);&#10;});&#10;          " description="延后执行" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="statusbarheight" value="// 状态栏高度&#10;    double statusBarHeight = MediaQuery.of(context).padding.top;&#10;    ScreenUtil().statusBarHeight" description="状态栏高度" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="pd" value="Positioned(&#10;    $right$: $0$,&#10;    child:$view$&#10;)" description="positioned具体定位view" toReformat="true" toShortenFQNames="true">
    <variable name="right" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="0" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="view" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="padding" value="Padding(&#10;    padding: EdgeInsets.symmetric(horizontal: 0.w),&#10;    child: ,&#10;)" description="内容偏移" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="image" value="Image(image: AssetImage(&quot;assets/images/$bg$.png&quot;,))&#10;Image.network($url$)&#10;Image.network(&#10;  'https://flutter.github.io/assets-for-api-docs/assets/widgets/puffin.jpg',&#10;  height: 150,&#10;  width: 150,&#10;  fit: BoxFit.cover,&#10;  frameBuilder: (&#10;      BuildContext context,&#10;      Widget child,&#10;      int? frame,&#10;      bool? wasSynchronouslyLoaded,&#10;      ) {&#10;    if (frame == null) {&#10;      return Image.asset(&#10;        'assets/images/chat.png',&#10;        height: 150,&#10;        width: 150,&#10;        fit: BoxFit.cover,&#10;      );&#10;    }&#10;    return child;&#10;  },&#10;)" description="图片" toReformat="true" toShortenFQNames="true">
    <variable name="bg" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="url" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="transform" value="Transform.rotate(&#10;    angle: pi / 4.0,&#10;    child: Container(&#10;        width: 8.w,&#10;        height: 8.w,&#10;        color: Color(0xFF151E25),&#10;    ),&#10;)" description="旋转" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="timer" value="    Timer? kickTimer;&#10;    int count = 0;&#10;&#10;    kickTimer?.cancel();&#10;    kickTimer = null;&#10;&#10;    var kickAction = (timer) {&#10;      if (count &gt;= 5) {&#10;        kickTimer?.cancel();&#10;        kickTimer = null;&#10;        count = 0;&#10;      }&#10;      count++;&#10;    };&#10;&#10;    kickTimer = Timer.periodic(const Duration(milliseconds: 500), kickAction);&#10;    kickAction(kickTimer!); //立即触发timer" description="定时器" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="get" value="  $String$ _$contents$;&#10;  $String$ get $contents$ =&gt; _$contents$;&#10;  set $contents$($String$ value) {&#10;    _$contents$ = value;&#10;  }" description="get计算型方法以及set方法" toReformat="true" toShortenFQNames="true">
    <variable name="contents" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="String" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="rightswipe" value="return Scaffold(&#10;appBar: AppBar(&#10;backgroundColor: Colors.white,&#10;title: Text('title'),&#10;),&#10;body: WillPopScope(&#10;child: Text('禁止侧滑返回'),&#10;onWillPop: () async{&#10;return false;&#10;})&#10;);" description="禁止右滑退出页面" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="inputGuangBiao" value="transferAmountCtrl.text = balance;&#10;        transferAmountCtrl.selection = TextSelection.fromPosition(&#10;          TextPosition(offset: transferAmountCtrl.text.length),&#10;        );" description="输入框赋值后光标放最后" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="sharedInstant" value="class $Singleton$ {&#10;  static final $Singleton$ _instance = $Singleton$._internal();&#10;&#10;  static $Singleton$ get instance {&#10;    return _instance;&#10;  }&#10;&#10;  $Singleton$._internal() {&#10;    init();&#10;  }&#10;&#10;  void init() {&#10;    //print(&quot;这里初始化&quot;);&#10;  }&#10;}&#10;" description="单例模板" toReformat="true" toShortenFQNames="true">
    <variable name="Singleton" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="regex" value="var re = RegExp(r'(?&lt;=quick)(.*)(?=over)');&#10;String data =&quot;the quick brown fox jumps over the lazy dog&quot;;&#10;var match = re.firstMatch(data);&#10;if (match != null) print(match.group(0));&#10;&#10;///手机号验证&#10;static bool isChinaPhoneLegal(String str) {&#10;return RegExp(&#10;        r&quot;^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\d{8}$&quot;)&#10;    .hasMatch(str);&#10;}&#10;&#10;///邮箱验证&#10;static bool isEmail(String str) {&#10;return RegExp(r&quot;^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$&quot;)&#10;    .hasMatch(str);&#10;}&#10;&#10;///验证URL&#10;static bool isUrl(String value) {&#10;return RegExp(r&quot;^((https|http|ftp|rtsp|mms)?:\/\/)[^\s]+&quot;).hasMatch(value);&#10;}&#10;&#10;///验证身份证&#10;static bool isIdCard(String value) {&#10;return RegExp(r&quot;\d{17}[\d|x]|\d{15}&quot;).hasMatch(value);&#10;}&#10;&#10;///验证中文&#10;static bool isChinese(String value) {&#10;return RegExp(r&quot;[\u4e00-\u9fa5]&quot;).hasMatch(value);&#10;}" description="正则替换举例" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="containerbgimage" value="Container(&#10;  decoration: const BoxDecoration(&#10;    image: DecorationImage(&#10;      image: AssetImage(&quot;images/bg.jpg&quot;),&#10;      fit: BoxFit.cover,&#10;    ),&#10;  ),&#10;  child: Container(),&#10;)" description="container背景图片" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="textnoline" value="decoration: TextDecoration.none" description="文字去掉下划线" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="containerroundborder" value="Container(&#10;              alignment: Alignment(0, 0),&#10;              height: 50,&#10;              width: 300,&#10;              decoration: BoxDecoration(&#10;                //背景&#10;                // color: Colors.white,&#10;                borderRadius: BorderRadius.all(Radius.circular(4.0)),&#10;                //设置四周边框&#10;                border: Border.all(width: 1, color: Colors.red),&#10;              ),&#10;              child: Text(&quot;Container 的圆角边框&quot;),&#10;            )" description="带圆角边框的" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="importscreen" value="import 'package:flutter_screenutil/flutter_screenutil.dart';" description=".w方法引用" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="textrich" value="    final Image image =&#10;        Image.asset('assets/images/icon_head.webp', width: 20, height: 20);&#10;    const TextStyle defaultStyle = TextStyle(color: Colors.black);&#10;    const TextStyle linkStyle = TextStyle(&#10;        color: Colors.blue,&#10;        decoration: TextDecoration.underline,&#10;        decorationColor: Colors.blue);&#10;&#10;    InlineSpan span = TextSpan(children: [&#10;      //文字内添加任何widget&#10;      WidgetSpan(&#10;        child: image,&#10;        alignment: PlaceholderAlignment.middle, //和文字的对齐方式&#10;      ),&#10;      const TextSpan(text: '我已同意 ', style: defaultStyle),&#10;      TextSpan(&#10;          text: '服务条款',&#10;          style: linkStyle,&#10;          recognizer: TapGestureRecognizer()..onTap = () {}),&#10;      const TextSpan(&#10;        text: ' 和 ',&#10;        style: defaultStyle,&#10;      ),&#10;      TextSpan(&#10;          text: '隐私政策',&#10;          style: linkStyle,&#10;          recognizer: TapGestureRecognizer()..onTap = () {}),&#10;      const TextSpan(text: ' 。', style: defaultStyle),&#10;    ]);&#10;    return Text.rich(span);" description="富文本" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="expansionpage" value="class Item {&#10;  Item({&#10;    required this.expandedValue,&#10;    required this.headerValue,&#10;    this.isExpanded = false,&#10;  });&#10;&#10;  String expandedValue;&#10;  String headerValue;&#10;  bool isExpanded;&#10;}&#10;&#10;List&lt;Item&gt; generateItems(int numberOfItems) {&#10;  return List.generate(numberOfItems, (int index) {&#10;    return Item(&#10;      headerValue: 'Panel $index',&#10;      expandedValue: 'This is item number $index',&#10;    );&#10;  });&#10;}&#10;&#10;class ExpansionPanelPage extends StatefulWidget {&#10;  ExpansionPanelPage({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  _ExpansionPanelPageState createState() =&gt; _ExpansionPanelPageState();&#10;}&#10;&#10;class _ExpansionPanelPageState extends State&lt;ExpansionPanelPage&gt; {&#10;  List&lt;Item&gt; _data = generateItems(80);&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(&#10;        title: Text('ExpansionPanelPage'),&#10;      ),&#10;      body: SingleChildScrollView(&#10;        child: Container(&#10;          child: _buildPanel(),&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;&#10;  Widget _buildPanel() {&#10;    return ExpansionPanelList(&#10;      expansionCallback: (int index, bool isExpanded) {&#10;        setState(() {&#10;          _data[index].isExpanded = !isExpanded;&#10;        });&#10;      },&#10;      children: _data.map&lt;ExpansionPanel&gt;((Item item) {&#10;        return ExpansionPanel(&#10;          headerBuilder: (BuildContext context, bool isExpanded) {&#10;            return ListTile(&#10;              title: Text(item.headerValue),&#10;            );&#10;          },&#10;          canTapOnHeader: false,&#10;          body: ListTile(&#10;              title: Text(item.expandedValue),&#10;              subtitle: Text('To delete this panel, tap the trash can icon'),&#10;              trailing: Icon(Icons.delete),&#10;              onTap: () {&#10;                setState(() {&#10;                  _data.removeWhere((currentItem) =&gt; item == currentItem);&#10;                });&#10;              }),&#10;          isExpanded: item.isExpanded,&#10;        );&#10;      }).toList(),&#10;    );&#10;  }&#10;}" description="可展开收起的部件页面" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="containergradient" value="Container(&#10;  alignment: Alignment.center,&#10;  margin:&#10;      const EdgeInsets.only(left: 16, right: 16, top: 16, bottom: 16),&#10;  padding: const EdgeInsets.only(top: 16, bottom: 16),&#10;  decoration: const BoxDecoration(&#10;      borderRadius: BorderRadius.all(Radius.circular(8)),&#10;      gradient: LinearGradient(&#10;        colors: [Color(0xFFFFFFFF), Color(0xFF00E7EC)],&#10;        begin: Alignment.topCenter,&#10;        end: Alignment.bottomCenter,&#10;      )),&#10;)" description="带渐变的容器" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="importnumextension" value="import 'package:ob_zr_app/components/extension/num_extension.dart';" description="fixed(2)方法" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="textshadow" value="style: TextStyle(&#10;                        fontSize: 8,&#10;                        color: Colors.white,&#10;                        shadows: &lt;Shadow&gt;[&#10;                          Shadow(&#10;                            offset: Offset(1.0, 1.0),&#10;                            blurRadius: 1.0,&#10;                            color: Color.fromARGB(255, 0, 0, 0),&#10;                          ),&#10;                          Shadow(&#10;                            offset: Offset(1.0, 1.0),&#10;                            blurRadius: 1.0,&#10;                            color: Color.fromARGB(125, 0, 0, 255),&#10;                          ),&#10;                        ],&#10;                      )" description="文字阴影" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="image属性说明" value="const Image({&#10;...&#10;this.width, //图片的宽&#10;this.height, //图片高度&#10;this.color, //图片的混合色值&#10;this.colorBlendMode, //混合模式&#10;this.fit,//缩放模式&#10;this.alignment = Alignment.center, //对齐方式&#10;this.repeat = ImageRepeat.noRepeat, //重复方式&#10;...&#10;})&#10;&#10;// width &amp; height&#10;width、height：用于设置图片的宽、高，当不指定宽高时，图片会根据当前父容器的限制，尽可能的显示其原始大小，&#10;如果只设置width、height的其中一个，那么另一个属性默认会按比例缩放，但可以通过下面介绍的fit属性来指定适应规则。&#10;&#10;// fit&#10;该属性用于在图片的显示空间和图片本身大小不同时指定图片的适应模式。适应模式是在BoxFit中定义，它是一个枚举类型，有如下值：&#10;&#10;fill：会拉伸填充满显示空间，图片本身长宽比会发生变化，图片会变形。// 拉伸填满全屏、图片变形&#10;&#10;cover：会按图片的长宽比放大后居中填满显示空间，图片不会变形，超出显示空间部分会被剪裁。// 被裁剪、比例全屏、图片不变形&#10;&#10;contain：这是图片的默认适应规则，图片会在保证图片本身长宽比不变的情况下缩放以适应当前显示空间，图片不会变形。 // 默认&#10;&#10;fitWidth：图片的宽度会缩放到显示空间的宽度，高度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。 // 宽度全部显示容器、高度比例缩放&#10;&#10;fitHeight：图片的高度会缩放到显示空间的高度，宽度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。 // 高度全是显示容器、宽度比例缩放&#10;&#10;none：图片没有适应策略，会在显示空间内显示图片，如果图片比显示空间大，则显示空间只会显示图片中间部分。 // 没有任何适配规则&#10;&#10;// repeat&#10;repeat：当图片本身大小小于显示空间时，指定图片的重复规则。&#10;&#10;// color &amp; colorBlendMode&#10;color和 colorBlendMode：在图片绘制时可以对每一个像素进行颜色混合处理，color指定混合色，而colorBlendMode指定混合模式；" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="get-tips" value="if (Get.isBottomSheetOpen ?? false) {&#10;      Get.back();&#10;    }&#10;// Get.until((route) =&gt; Get.currentRoute == AppRoutes.GAME);" description="Get的更多用法" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="stamp" value="DateTime.now().millisecondsSinceEpoch&#10;DateTime.fromMillisecondsSinceEpoch(1585140111111)" description="时间戳转为时间" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="cliprect" value="ClipRRect(&#10;        borderRadius: BorderRadius.all(Radius.circular(8)), child: Container())" description="绝对圆角" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="isios" value="//import 'dart:io';&#10;if (Platform.isIOS) {}" description="是否是ios" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="textsize" value="Size boundingTextSize(BuildContext context, String text, TextStyle style,&#10;    {int maxLines = 2 ^ 31, double maxWidth = double.infinity}) {&#10;  if (text.isEmpty) {&#10;    return Size.zero;&#10;  }&#10;  final TextPainter textPainter = TextPainter(&#10;      textDirection: TextDirection.ltr,&#10;      locale: Localizations.localeOf(context),&#10;      text: TextSpan(text: text, style: style),&#10;      maxLines: maxLines)&#10;    ..layout(maxWidth: maxWidth);&#10;  return textPainter.size;&#10;}" description="textsize" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="cooldown" value="  void _incrementCounter() {&#10;    bool enabled = CoolDownManager.handler(&#10;      key: 'switchTap',&#10;      duration: 650,&#10;    );&#10;    if (!enabled) {&#10;      return;&#10;    }&#10;   " description="cooldown" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="cooldownmanager" value="class CoolDownManager {&#10;  CoolDownManager._privateConstructor();&#10;&#10;  static final CoolDownManager _instance =&#10;      CoolDownManager._privateConstructor();&#10;&#10;  static CoolDownManager get instance {&#10;    return _instance;&#10;  }&#10;&#10;  static Map&lt;String, int&gt; timeMap = {};&#10;&#10;  static bool handler({required String key, required int duration}) {&#10;    int currentTime = DateTime.now().millisecondsSinceEpoch;&#10;    if (currentTime - (timeMap[key] ?? 0) &gt; duration) {&#10;      timeMap[key] = DateTime.now().millisecondsSinceEpoch;&#10;      return true;&#10;    }&#10;    return false;&#10;  }&#10;}&#10;" description="cooldownmanager" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="listofui" value="List.generate(10, (i) {&#10;        double w = 50.0 + 10 * i;&#10;        return Container(&#10;          color: Colors.primaries[i],&#10;          height: 50,&#10;          width: w,&#10;          child: Text('$i'),&#10;        );&#10;      })," description="返回数组组成的UI" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="swipeleftright" value="GestureDetector(&#10;    onHorizontalDragEnd: (DragEndDetails details) {&#10;      if (details.primaryVelocity &gt; 0) {&#10;        // User swiped Left&#10;      } else if (details.primaryVelocity &lt; 0) {&#10;        // User swiped Right&#10;      }&#10;    }&#10;)" description="左右滑动检测" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="screenhelp" value="final screenW = ScreenUtil().screenWidth;&#10;final screenH = ScreenUtil().screenHeight;" description="屏幕相关" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="imageFadein" value="FadeInImage.assetNetwork(&#10;    placeholder: 'assets/loading.gif',&#10;    image: 'https://picsum.photos/250?image=9',&#10;)&#10;FadeInImage.memoryNetwork(&#10;    placeholder: kTransparentImage,&#10;    image: '${item.image.value}',&#10;)&#10;final Uint8List kTransparentImage = new Uint8List.fromList([&#10;  0x89,&#10;  0x50,&#10;  0x4E,&#10;  0x47,&#10;  0x0D,&#10;  0x0A,&#10;  0x1A,&#10;  0x0A,&#10;  0x00,&#10;  0x00,&#10;  0x00,&#10;  0x0D,&#10;  0x49,&#10;  0x48,&#10;  0x44,&#10;  0x52,&#10;  0x00,&#10;  0x00,&#10;  0x00,&#10;  0x01,&#10;  0x00,&#10;  0x00,&#10;  0x00,&#10;  0x01,&#10;  0x08,&#10;  0x06,&#10;  0x00,&#10;  0x00,&#10;  0x00,&#10;  0x1F,&#10;  0x15,&#10;  0xC4,&#10;  0x89,&#10;  0x00,&#10;  0x00,&#10;  0x00,&#10;  0x0A,&#10;  0x49,&#10;  0x44,&#10;  0x41,&#10;  0x54,&#10;  0x78,&#10;  0x9C,&#10;  0x63,&#10;  0x00,&#10;  0x01,&#10;  0x00,&#10;  0x00,&#10;  0x05,&#10;  0x00,&#10;  0x01,&#10;  0x0D,&#10;  0x0A,&#10;  0x2D,&#10;  0xB4,&#10;  0x00,&#10;  0x00,&#10;  0x00,&#10;  0x00,&#10;  0x49,&#10;  0x45,&#10;  0x4E,&#10;  0x44,&#10;  0xAE&#10;]);" description="渐现加载网络图片" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="enum" value="enum $TypeName$ {&#10;  $type1$,  &#10;  $type2$, &#10;  $type3$, &#10;}" description="枚举举例" toReformat="true" toShortenFQNames="true">
    <variable name="TypeName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type2" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type3" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="zlogfull" value="void ZLog(Object? object) {&#10;  if (kReleaseMode) return;&#10;  print(object);&#10;}" description="zlog完全体" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="zlog" value="ZLog('-zlog- $text$');" description="zlog" toReformat="true" toShortenFQNames="true">
    <variable name="text" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="findchinese" value="//匹配项目中中文字符&#10;['|&quot;].[\u4e00-\u9fa5]+.['|&quot;]&#10;//或&#10;['|&quot;]*[\u4E00-\u9FA5]+['|&quot;]" description="查找所有中文" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="listview" value="ListView.builder(&#10;                      itemCount: controller.data?.record.length ?? 0,&#10;                      itemBuilder: (ctx, index) {&#10;                        return GestureDetector(&#10;                          onTap: () =&gt; controller.navigateDetail(index),&#10;                          child: BetRecordPageItem(&#10;                              data: controller.data!.record[index]),&#10;                        );&#10;                      },&#10;                    )" description="列表构建" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="txtsprintf" value="sprintf('$txt$'.tr,[$str$])" description="多语言带参数字符串" toReformat="true" toShortenFQNames="true">
    <variable name="txt" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="str" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="pageview" value="List&lt;Widget&gt; pageList = [PageView1(), PageView2(), PageView3()];&#10;&#10;PageView.builder(&#10;&#9;itemCount: 10000,&#10;&#9;itemBuilder: (context, index) {&#10;&#9;&#9;return pageList[index % (pageList.length)];&#10;    },&#10;)" description="无限滚动pageview" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="containerImgBg" value="          Container(&#10;            width: 270,&#10;            // height:  300,&#10;            padding: const EdgeInsets.only(left: 8,top: 8,right: 20,bottom: 8),&#10;            decoration: const BoxDecoration(&#10;                image: DecorationImage(&#10;                    centerSlice: Rect.fromLTWH(20, 20, 1, 1),&#10;                    image: AssetImage(&#10;                      'assets/images/chat.png',&#10;                    ),&#10;                    fit: BoxFit.fill)),&#10;            child: const Text('老孟，专注分享Flutter技术和应用实战。'&#10;                '老孟，专注分享Flutter技术和应用实战。'&#10;                '老孟，专注分享Flutter技术和应用实战。',),&#10;          )," description="点9图拉伸作为背景" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="containerAvatar" value="          Container(&#10;            width: 100,&#10;            height: 100,&#10;            padding: EdgeInsets.all(3),&#10;            decoration: BoxDecoration(shape: BoxShape.circle, color: Colors.blue),&#10;            child: Container(&#10;              decoration: BoxDecoration(&#10;                  shape: BoxShape.circle,&#10;                  image: DecorationImage(&#10;                      image: AssetImage('assets/images/chat.png'), fit: BoxFit.cover)),&#10;            ),&#10;          )" description="圆形带边框头像" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="flutterkjj" value="只需要输入 stless 就可以创建一个StatelessWidget。&#10;只需要输入 stful 就可以创建一个StatefulWidget。&#10;给一个Widget包裹一个父元素：把光标放在当前Widget上面，option + 回车，出现wrap with xxx&#10;Commond + d 快速复制一行；&#10;把一个变量(类名或多行代码)转成全大写字母：Command + Shift + U，再按一下切换回来&#10;将当前行上移或下移：option + Shift + 上(下)箭头;&#10;将光标移动到上一次编辑（停留）过的地方： option+Command+左箭头，在代码比较多的页面中(或者查看源码的时候)，点击查看一个方法，看完后再回到原来的位置，就可以用此快捷键；option+Command+右箭头 相反的方向。&#10;清除无用引用  快捷键：control + option + O（字母 O 键）&#10;多行注释/**/：option + command + / 或者选中多行 ：command + /&#10;左移代码： 选中代码后 按 shift+Tab即可实现左移操作。&#10;代码格式化：选中代码后 按 option+command+l" description="flutter开发快捷键" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="for" value="for (var $element$ in $list$) { &#10;    $code$&#10;}  " description="for循环" toReformat="true" toShortenFQNames="true">
    <variable name="element" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="list" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="code" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="icon" value="Icon(Icons.speaker_group,size: 100,color: Colors.orange,)" description="系统图标" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="rpx" value="Rpx.setRpx($1$)" description="rpx快捷键" toReformat="true" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="rpxinit" value="Rpx.initialize(context);" description="prx初始化（build方法内）" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="imgshort" value=" Image(image: AssetImage('img/v2/common/$name$.png'),)" description="img快速方式" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="red" value="Colors.red" description="红色" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="providerwithchild" value="ChangeNotifierProvider.value(&#10;      value: CounterNotifier(),&#10;      child: Container(),&#10;    )" description="provider带child" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="regexnote" value="abc…&#9;Letters&#10;123…&#9;Digits&#10;\d&#9;Any Digit&#10;\D&#9;Any Non-digit character&#10;.&#9;Any Character&#10;\.&#9;Period&#10;[abc]&#9;Only a, b, or c&#10;[^abc]&#9;Not a, b, nor c&#10;[a-z]&#9;Characters a to z&#10;[0-9]&#9;Numbers 0 to 9&#10;\w&#9;Any Alphanumeric character&#10;\W&#9;Any Non-alphanumeric character&#10;{m}&#9;m Repetitions&#10;{m,n}&#9;m to n Repetitions&#10;*&#9;Zero or more repetitions&#10;+&#9;One or more repetitions&#10;?&#9;Optional character&#10;\s&#9;Any Whitespace&#10;\S&#9;Any Non-whitespace character&#10;^…$&#9;Starts and ends&#10;(…)&#9;Capture Group&#10;(a(bc))&#9;Capture Sub-group&#10;(.*)&#9;Capture all&#10;(abc|def)&#9;Matches abc or def" description="正则小抄" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="ifversion" value="if (appThemeVersion == AppTheme.whiteTheme) {&#10;  &#10;} else if (appThemeVersion == AppTheme.darkTheme) {&#10;  &#10;}" description="版本判断" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="gradienttext" value="ShaderMask(&#10;  shaderCallback: (Rect bounds) {&#10;    return LinearGradient(&#10;      begin: Alignment.centerLeft,&#10;      end: Alignment.centerRight,&#10;      colors: [Color(0xffFEC635), Color(0xffFD4827)],&#10;    ).createShader(Offset.zero &amp; bounds.size);&#10;  },&#10;  blendMode: BlendMode.srcATop,&#10;  child: Container(&#10;    child: Text(&#10;      &quot;充值中心&quot;,&#10;      style: TextStyle(&#10;          fontSize: 18,&#10;          color: Color(0xffffffff),&#10;          fontWeight: FontWeight.w500),&#10;    ),&#10;  ),&#10;)" description="渐变文字" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="appbar" value="Scaffold(&#10;appBar: CommonAppBar(&#10;  title: S.current.l_id_30058,&#10;),&#10;backgroundColor: MessagesSetting.MESSAGES_BG,&#10;body: ScrollConfiguration(&#10;  behavior: NoShadowScrollBehavior(),&#10;  child: ProviderWidget&lt;MyNoticeRefrishListModel&gt;(&#10;      model: MyNoticeRefrishListModel(),&#10;      onModelReady: (model) {&#10;        model.refresh(init: true);&#10;      },&#10;      builder: (context, listModel, child) {&#10;        return _makeSmartRefresher(listModel);&#10;      }),&#10;));" description="带appbar的页面" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="constraint" value="constraints: BoxConstraints(minHeight: 900)," description="对container添加宽高约束" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="white" value="Colors.white" description="白色" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="keyboardClose" value="GestureDetector(&#10;    onTap: () {&#10;        FocusScope.of(context).requestFocus(FocusNode());&#10;    },&#10;}" description="点击页面收起键盘的办法" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="bottomsheet" value="   BorderRadius topBorderRadius = const BorderRadius.only(&#10;      topLeft: Radius.circular(20.0),&#10;      topRight: Radius.circular(20.0),&#10;    );&#10;    showModalBottomSheet(&#10;        context: context,&#10;        isScrollControlled: true,&#10;        backgroundColor: Colors.transparent,&#10;        builder: (context) =&gt; Container(&#10;            decoration: BoxDecoration(&#10;              borderRadius: topBorderRadius,&#10;              color: Color(0xFF1F222E),&#10;            ),&#10;            child: Column(&#10;              mainAxisSize: MainAxisSize.min,&#10;              children: [&#10;                Container(&#10;                  height: 50,&#10;                  decoration: BoxDecoration(&#10;                    borderRadius: topBorderRadius,&#10;                    color: Color(0xFF16181F),&#10;                  ),&#10;                  child: Row(&#10;                    mainAxisAlignment: MainAxisAlignment.center,&#10;                    children: [&#10;                      const SizedBox(width: 31),&#10;                      const Spacer(),&#10;                      const Text(&#10;                        '温馨提示',&#10;                        style: TextStyle(&#10;                          fontSize: 18,&#10;                          color: Color(0xE6FFFFFF),&#10;                        ),&#10;                      ),&#10;                      const SizedBox(width: 5),&#10;                      Container(&#10;                        height: 16,&#10;                        width: 16,&#10;                        alignment: Alignment.centerRight,&#10;                        color: Colors.red,&#10;                      ),&#10;                      const Spacer(),&#10;                      GestureDetector(&#10;                        onTap: () {&#10;                          Navigator.pop(context);&#10;                        },&#10;                        child: Container(&#10;                          margin: const EdgeInsets.only(right: 15),&#10;                          width: 16,&#10;                          height: 16,&#10;                          color: Colors.red,&#10;                        ),&#10;                      )&#10;                    ],&#10;                  ),&#10;                ),&#10;                Container(&#10;                  height: 80,&#10;                  color: Colors.green,&#10;                )&#10;              ],&#10;            )));" description="底部弹窗" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="customerservice" value="V2CustomerView().init(context);" description="联系客服" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="mixin示例" value="mixin DrawFunc {&#10;  String content = '..';&#10;&#10;  String what();&#10;&#10;  void draw() {&#10;    print('I can draw ${what()}');&#10;  }&#10;}&#10;&#10;class Teacher with DrawFunc {&#10;  String what() =&gt; &quot;car&quot;;&#10;}&#10;" description="mixin简单示例" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="find" value="// 在Java中查找对象数组中元素索引的通用方法&#10;public static&lt;T&gt; int find(T[] a, T target) {&#10;    return Arrays.asList(a).indexOf(target);&#10;}" description="查找元素" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="listhelp" value="var list = [1,null,2,3];&#10;var list1 = [0,...list];[...list];[...?list]; //在新的数组里填入元素&#10;var list1 = [...?list]; //避免list是null&#10;var more = [1, ...list.where((e) =&gt; e != null), 4];//避免null的元素&#10;&#10;var fruits = ['bananas', 'apples', 'oranges'];&#10;fruits.sort((a, b) =&gt; a.compareTo(b));&#10;&#10;listOfInts.any((element) =&gt; element &gt; 0);//只要有个符合条件&#10;listOfInts.every((element) =&gt; element &gt; 0);//每一个符合条件" description="数组使用帮助" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="listtomap" value="var map = { for (var e in listOfInts) '${e+1}' : '${e+2}' };" description="数组转字典" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="maphelp" value="//将2个map合并产生新的map&#10;var map = {&#10;  ...options.queryParameters,&#10;  ...options.data&#10;}&#10;&#10;//对应的key不存在的时候才赋值&#10;var teamAssignments = &lt;String, String&gt;{};&#10;    teamAssignments.putIfAbsent('Catcher', () =&gt; 'value111');&#10;" description="map帮助" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="alertsystem" value="showDialog(&#10;        context: context,&#10;        builder: (context) {&#10;          return AlertDialog(&#10;            title: const Text('提示'),&#10;            content: const Text('确认删除吗？'),&#10;            actions: &lt;Widget&gt;[&#10;              TextButton(&#10;                child: const Text('取消'),&#10;                onPressed: () {&#10;                  Navigator.of(context).pop('cancel');&#10;                },&#10;              ),&#10;              TextButton(&#10;                child: const Text('确认'),&#10;                onPressed: () {&#10;                  Navigator.of(context).pop('ok');&#10;                },&#10;              ),&#10;            ],&#10;          );&#10;        });" description="弹窗（系统风格）" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="appbarexample" value="class MineAppBar extends StatelessWidget implements PreferredSizeWidget {&#10;  const MineAppBar({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  Size get preferredSize =&gt; const Size.fromHeight(200);&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return AppBar(&#10;      centerTitle: true,&#10;      title: const Text('生存日记', style: TextStyle(color: Color(0xFF02020D))),&#10;      flexibleSpace: Container(&#10;        decoration: const BoxDecoration(&#10;          gradient: LinearGradient(colors: [&#10;            Color(0xFFFAD956),&#10;            Colors.white,&#10;          ], begin: Alignment.topCenter, end: Alignment.bottomCenter),&#10;        ),&#10;      ),&#10;      bottom: const PreferredSize(&#10;        preferredSize: Size.fromHeight(140),&#10;        child: MyCollect(),&#10;      ),&#10;    );&#10;  }&#10;}&#10;&#10;class MyCollect extends StatefulWidget {&#10;  const MyCollect({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;MyCollect&gt; createState() =&gt; _MyCollectState();&#10;}&#10;&#10;class _MyCollectState extends State&lt;MyCollect&gt; {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Column(&#10;      children: [&#10;        Row(&#10;          mainAxisAlignment: MainAxisAlignment.spaceEvenly,&#10;          crossAxisAlignment: CrossAxisAlignment.end,&#10;          children: &lt;Widget&gt;[&#10;            Column(&#10;              children: const &lt;Widget&gt;[&#10;                Text(&#10;                  '2021年',&#10;                  style: TextStyle(color: Color(0xFF808080), fontSize: 12),&#10;                ),&#10;                Padding(&#10;                  padding: EdgeInsets.fromLTRB(0, 8, 0, 0),&#10;                  child: Text(&#10;                    '02月',&#10;                    style: TextStyle(color: Colors.black, fontSize: 16),&#10;                  ),&#10;                )&#10;              ],&#10;            ),&#10;            Column(&#10;              children: const &lt;Widget&gt;[&#10;                Text(&#10;                  '负债金额',&#10;                  style: TextStyle(color: Color(0xFF808080), fontSize: 12),&#10;                ),&#10;                Padding(&#10;                  padding: EdgeInsets.fromLTRB(0, 8, 0, 0),&#10;                  child: Text(&#10;                    '78000元',&#10;                    style: TextStyle(color: Colors.black, fontSize: 16),&#10;                  ),&#10;                )&#10;              ],&#10;            ),&#10;            Column(&#10;              children: const &lt;Widget&gt;[&#10;                Text(&#10;                  '本月还款',&#10;                  style: TextStyle(color: Color(0xFF808080), fontSize: 12),&#10;                ),&#10;                Padding(&#10;                  padding: EdgeInsets.fromLTRB(0, 8, 0, 0),&#10;                  child: Center(&#10;                    child: Text(&#10;                      '7000元',&#10;                      style: TextStyle(color: Colors.black, fontSize: 16),&#10;                    ),&#10;                  ),&#10;                )&#10;              ],&#10;            ),&#10;          ],&#10;        ),&#10;        const MineItemRow()&#10;      ],&#10;    );&#10;  }&#10;}&#10;&#10;class MineItemRow extends StatelessWidget {&#10;  const MineItemRow({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    // TODO: implement build&#10;    return Container(&#10;      margin: const EdgeInsets.all(5),&#10;      padding: const EdgeInsets.all(5),&#10;      child: DecoratedBox(&#10;          decoration: const BoxDecoration(&#10;              color: Colors.white,&#10;              borderRadius: BorderRadius.all(Radius.circular(10)),&#10;              boxShadow: [&#10;                //阴影&#10;                BoxShadow(offset: Offset(2.0, 2.0), blurRadius: 10)&#10;              ]),&#10;          child: Padding(&#10;            padding: const EdgeInsets.all(10),&#10;            child: Flex(&#10;              mainAxisAlignment: MainAxisAlignment.center,&#10;              crossAxisAlignment: CrossAxisAlignment.center,&#10;              direction: Axis.horizontal,&#10;              children: &lt;Widget&gt;[&#10;                Expanded(&#10;                    flex: 1,&#10;                    child: Column(&#10;                      children: const &lt;Widget&gt;[&#10;                        Icon(IconData(0xe63e, fontFamily: 'iconfont')),&#10;                        Text('负债记录',&#10;                            style: TextStyle(color: Colors.black, fontSize: 12))&#10;                      ],&#10;                    )),&#10;                Expanded(&#10;                  flex: 1,&#10;                  child: Column(&#10;                    children: const &lt;Widget&gt;[&#10;                      Icon(IconData(0xe688, fontFamily: 'iconfont')),&#10;                      Text('生存日记',&#10;                          style: TextStyle(color: Colors.black, fontSize: 12))&#10;                    ],&#10;                  ),&#10;                ),&#10;                Expanded(&#10;                  flex: 1,&#10;                  child: Column(&#10;                    children: const &lt;Widget&gt;[&#10;                      Icon(IconData(0xe6a0, fontFamily: 'iconfont')),&#10;                      Text('脚踏实地',&#10;                          style: TextStyle(color: Colors.black, fontSize: 12))&#10;                    ],&#10;                  ),&#10;                ),&#10;                Expanded(&#10;                  flex: 1,&#10;                  child: Column(&#10;                    children: const &lt;Widget&gt;[&#10;                      Icon(IconData(0xe6e8, fontFamily: 'iconfont')),&#10;                      Text('不软动脑',&#10;                          style: TextStyle(color: Colors.black, fontSize: 12))&#10;                    ],&#10;                  ),&#10;                ),&#10;                Expanded(&#10;                  flex: 1,&#10;                  child: Column(&#10;                    children: const &lt;Widget&gt;[&#10;                      Icon(IconData(0xe62f, fontFamily: 'iconfont')),&#10;                      Text('点打点赢',&#10;                          style: TextStyle(color: Colors.black, fontSize: 12))&#10;                    ],&#10;                  ),&#10;                ),&#10;              ],&#10;            ),&#10;          )),&#10;    );&#10;  }&#10;}" description="appbar组合使用示例" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="darthelp" value="String? a;&#10;a ??= '909';// a 为空 则赋值为 909；" description="dart帮助" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="futureforeach" value="//根据某个集合 顺序执行多个future&#10;Future.forEach([1, 2, 3], (item) {&#10;  return Future.delayed(Duration(milliseconds: 100), () {&#10;    print(item);&#10;  });&#10;});" description="根据集合顺序执行多个future" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="getbacktoroute" value="Get.until((route) =&gt; Get.currentRoute == AppRoutes.DEPOSIT);" description="返回到指定路由" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="gradient" value="decoration: BoxDecoration(&#10;          gradient: LinearGradient(&#10;              begin: Alignment.centerLeft,&#10;              end: Alignment.centerRight,&#10;              colors: &lt;Color&gt;[&#10;            Colors.transparent,&#10;            Colors.black,&#10;            Colors.transparent,&#10;          ]))," description="渐变图层" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="ifregister" value="late BetController _betController;&#10;    if (Get.isRegistered&lt;BetController&gt;()) {&#10;      _betController = Get.find&lt;BetController&gt;();&#10;    } else {&#10;      _betController = Get.put(BetController());&#10;    }" description="判断类是否有初始化过" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="jiantingOne" value="  StreamSubscription? _listener;&#10;  _listener = eventBus.on&lt;FlyChipEvent&gt;().listen((event) {&#10;      List&lt;int&gt; activePoints = _betController.activePoints;&#10;       &#10;    });&#10;&#10;@override&#10;  void dispose() {&#10;    _listener?.cancel();&#10;    super.dispose();&#10;  }" description="单个事件监听" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="kefu" value="KefuSelectPanel().showKefuSelectPanel(context);" description="联系客服" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="navto" value="Routes.navigateTo(context, Routes.V2_CHARGE_INFO_PAGE);" description="跳转页面" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="popback" value="Navigator.pop(context);" description="退出当前页面" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="popbacktoRoot" value="Navigator.popUntil(context, (route) =&gt; route.isFirst);" description="返回根页面" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="regexinput" value="const _regExp=r&quot;^[a-z0-9]+$&quot;;//只允许数字和小写字母&#10;class $InputFormatterName$ extends TextInputFormatter{&#10;  @override&#10;  TextEditingValue formatEditUpdate(TextEditingValue oldValue, TextEditingValue newValue) {&#10;    if(newValue.text.isNotEmpty){&#10;      if(RegExp(_regExp).firstMatch(newValue.text)!=null){&#10;        return newValue;&#10;      }&#10;      return oldValue;&#10;    }&#10;    return newValue;&#10;  }&#10;}" description="正则输入替换" toReformat="true" toShortenFQNames="true">
    <variable name="InputFormatterName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="regexinputfield" value="TextFormField(&#10;  inputFormatters: [&#10;    TextNumberLimitFormatter(maxLimit),&#10;  ],&#10;  controller: controller,&#10;  keyboardType: TextInputType.number,&#10;  onChanged: (_) {&#10;    controller!.selection = TextSelection.fromPosition(&#10;      TextPosition(offset: controller!.text.length),&#10;    );&#10;  },&#10;)," description="正则输入框举例" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="standbtn" value="StandButton(&#10;  width: 140,&#10;  height: 40,&#10;  child: StandButtonTitle(title: S.current.l_id_30008),&#10;  style: StandButtonStyle.gradient,&#10;  onPressed: () {&#10;    &#10;  },&#10;)" description="快捷创建" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="standbuttonuse" value="StandButton(&#10;width: 162,&#10;child: StandButtonTitle(title: '游客登录'),&#10;onPressed: () {&#10; &#10;},&#10;)" description="标准按钮使用" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="switchtheme" value="switch (appThemeVersion) {&#10;  case AppTheme.whiteTheme:&#10;    return $HomeScene$;&#10;  case AppTheme.darkTheme:&#10;    return $HomeView$;&#10;}" description="切换主题代码" toReformat="true" toShortenFQNames="true">
    <variable name="HomeScene" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="HomeView" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="template-binding" value="import 'package:get/get.dart';&#10;import 'package:get/get_instance/src/bindings_interface.dart';&#10;&#10;import 'load_controller.dart';&#10;&#10;class LoadBinding implements Bindings {&#10;  @override&#10;  void dependencies() {&#10;    Get.lazyPut&lt;LoadController&gt;(() =&gt; LoadController());&#10;  }&#10;}&#10;" description="binding模板" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="template-body" value="import 'package:flutter/material.dart';&#10;import 'package:get/get.dart';&#10;import '../load_controller.dart';&#10;&#10;class LoadBody extends StatefulWidget {&#10;  @override&#10;  _LoadBodyState createState() =&gt; _LoadBodyState();&#10;}&#10;&#10;class _LoadBodyState extends State&lt;LoadBody&gt; {&#10;  LoadController loadController = Get.find&lt;LoadController&gt;();&#10;&#10;  @override&#10;  void initState() {&#10;    super.initState();&#10;  }&#10;&#10;  @override&#10;  void dispose() {&#10;    super.dispose();&#10;  }&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      body: Container(),&#10;    );&#10;  }&#10;}&#10;" description="body模板" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="template-controller" value="import 'package:get/get_state_manager/src/simple/get_controllers.dart';&#10;&#10;class LoginController extends GetxController {&#10;  @override&#10;  void onInit() {&#10;    super.onInit();&#10;  }&#10;&#10;  @override&#10;  void onDetached() {}&#10;&#10;  @override&#10;  void onInactive() {}&#10;&#10;  @override&#10;  void onPaused() {}&#10;&#10;  @override&#10;  void onResumed() {}&#10;&#10;  @override&#10;  void onClose() {&#10;    super.onClose();&#10;  }&#10;}&#10;" description="controller模板" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="template-page" value="import 'package:flutter/cupertino.dart';&#10;import 'package:get/get.dart';&#10;import 'components/load_body.dart';&#10;import 'load_controller.dart';&#10;&#10;class LoadPage extends GetView&lt;LoadController&gt; {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return LoadBody();&#10;  }&#10;}&#10;" description="page模板" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="white10" value="Colors.white10" description="白色0.1" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="white60" value="Colors.white60" description="白色0.6" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="white90" value="Colors.white.withOpacity(0.9)" description="白色0.9" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="initstate" value="  @override&#10;  void initState() {&#10;    super.initState();&#10;  }" description="重写initState方法" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="providerclass" value="class $SetCurrencyModel$ extends ChangeNotifier {&#10;  List&lt;String&gt; nameList = [];&#10;   $SetCurrencyModel$() {&#10;    nameList = ['CNY', 'VND'];&#10;  }&#10;&#10;  void setNameList(List&lt;String&gt; list){&#10;     nameList = list;&#10;     notifyListeners();&#10;  }&#10;}&#10;//在UI的build方法里&#10;//SetCurrencyModel model = Provider.of&lt;SetCurrencyModel&gt;(context);" description="使用provider的类创建" toReformat="true" toShortenFQNames="true">
    <variable name="SetCurrencyModel" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="providerModel" value="$SetCurrencyModel$ model = Provider.of&lt;$SetCurrencyModel$&gt;(context);" description="build内声明provider变量" toReformat="true" toShortenFQNames="true">
    <variable name="SetCurrencyModel" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="typedef" value="typedef $FunctionName$ = void Function(String currency);" description="方法声明" toReformat="true" toShortenFQNames="true">
    <variable name="FunctionName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="s.current" value="S.current.l_id_310$11$" description="多语言快捷" toReformat="true" toShortenFQNames="true">
    <variable name="11" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="reverseArray" value="//反转数组&#10;static void reverseArray(int[] array) {&#10;    int start = 0;&#10;    int end = array.length - 1;&#10;    while (start &lt; end) {&#10;        int temp = array[start];&#10;        array[start] = array[end];&#10;        array[end] = temp;&#10;        start++;&#10;        end--;&#10;    }&#10;}" description="数组反转" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="sortArray" value="//从小大排列数组&#10;Arrays.sort(ar);" description="数组排序" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="IntToString" value="String $s$ = Integer.toString($100$);" description="int转string" toReformat="true" toShortenFQNames="true">
    <variable name="s" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="100" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="alertcustom" value="    showDialog(&#10;        barrierColor: Colors.black54, //default color&#10;        barrierDismissible: true, //default value&#10;        context: context,&#10;        builder: (context) {&#10;          return WillPopScope(&#10;            onWillPop: () async {&#10;              return true;&#10;            },&#10;            child: Container(&#10;              child: Center(&#10;                child: Container( //替换此位置&#10;                  width: 200,&#10;                  height: 100,&#10;                  color: Colors.red,&#10;                ),&#10;              ),&#10;            ),&#10;          );&#10;        });" description="弹窗（自定义）" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="FLUTTER" value="true" />
    </context>
  </template>
  <template name="timerintstream" value="Stream&lt;int&gt; intStream =&#10;    Stream&lt;int&gt;.periodic(const Duration(seconds: 1), (i) =&gt; i + 1);&#10;intStream = intStream.take(3); //方式1，重复执行3次&#10;//方式2，重复执行到允许停止&#10;intStream = intStream.takeWhile((element) {&#10;  return true;&#10;});&#10;intStream.listen((event) {&#10;  print(&quot;executes  ${event} times&quot;);&#10;});" description="定时执行额外方式" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="expansionwidget" value="class ExpansionWidget extends StatefulWidget {&#10;  const ExpansionWidget({Key? key}) : super(key: key);&#10;&#10;  @override&#10;  State&lt;ExpansionWidget&gt; createState() =&gt; _ExpansionWidgetState();&#10;}&#10;&#10;class _ExpansionWidgetState extends State&lt;ExpansionWidget&gt; {&#10;  bool isItemExpand = false;&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return SingleChildScrollView(&#10;      child: Container(&#10;        child: ExpansionPanelList(&#10;          expansionCallback: (int index, bool isExpanded) {&#10;            setState(() {&#10;              isItemExpand = !isItemExpand;&#10;            });&#10;          },&#10;          children: [&#10;            ExpansionPanel(&#10;              headerBuilder: (BuildContext context, bool isExpanded) {&#10;                return ListTile(&#10;                  title: Text(&quot;item.headerValue&quot;),&#10;                );&#10;              },&#10;              canTapOnHeader: false,&#10;              body: ListTile(&#10;                  title: Text(&quot;item.expandedValue&quot;),&#10;                  subtitle:&#10;                      Text('To delete this panel, tap the trash can icon'),&#10;                  trailing: Icon(Icons.delete),&#10;                  onTap: () {}),&#10;              isExpanded: isItemExpand,&#10;            )&#10;          ],&#10;        ),&#10;      ),&#10;    );&#10;  }&#10;}" description="可展开的widget" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="futuremulti" value="//等待多个future执行结果&#10;var f1 = Future.delayed(Duration(seconds: 10), () =&gt; (1));&#10;var f2 = Future.delayed(Duration(seconds: 2), () =&gt; throw &quot;erro2&quot;);&#10;var f3 = Future.delayed(Duration(seconds: 3), () =&gt; throw &quot;erro3&quot;);&#10;Future.wait([f1, f2, f3]).then((value) =&gt; print(value)).catchError(print);" description="多个future同时异步执行并得到结果，有异常会提前结束" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="futureany" value="//多个异步同时执行，但是只取最先完成的结果&#10;var f1 = Future.delayed(Duration(seconds: 10), () =&gt; (1));&#10;var f2 = Future.delayed(Duration(seconds: 2), () =&gt; (1));&#10;var f3 = Future.delayed(Duration(seconds: 3), () =&gt; (1));&#10;Future.any([f1, f2, f3]).then((value) =&gt; print(value));" description="多个异步执行，取最先完成的返回" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
</templateSet>