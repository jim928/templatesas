<templateSet group="Flutter">
  <template name="providerclass" value="class $SetCurrencyModel$ extends ChangeNotifier {&#10;  List&lt;String&gt; nameList = [];&#10;   $SetCurrencyModel$() {&#10;    nameList = ['CNY', 'VND'];&#10;  }&#10;&#10;  void setNameList(List&lt;String&gt; list){&#10;     nameList = list;&#10;     notifyListeners();&#10;  }&#10;}&#10;//在UI的build方法里&#10;//SetCurrencyModel model = Provider.of&lt;SetCurrencyModel&gt;(context);" description="使用provider的类创建" toReformat="false" toShortenFQNames="true">
    <variable name="SetCurrencyModel" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="providerModel" value="$SetCurrencyModel$ model = Provider.of&lt;$SetCurrencyModel$&gt;(context);" description="build内声明provider变量" toReformat="false" toShortenFQNames="true">
    <variable name="SetCurrencyModel" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="typedef" value="typedef $FunctionName$ = void Function(String currency);" description="方法声明" toReformat="false" toShortenFQNames="true">
    <variable name="FunctionName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="initstate" value="  @override&#10;  void initState() {&#10;    super.initState();&#10;  }" description="重写initState方法" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
</templateSet>