<templateSet group="Go(jim)">
  <template name="gohelp" value="package main&#10;&#10;/*&#10;brew install mysql&#10;brew services start mysql&#10;mysql -u root&#10;//在sql中创建用户名密码和db&#10;CREATE USER 'your_username'@'localhost' IDENTIFIED BY 'your_password';&#10;CREATE DATABASE your_database;&#10;GRANT ALL PRIVILEGES ON your_database.* TO 'your_username'@'localhost';&#10;FLUSH PRIVILEGES;&#10;&#10;//main文件示例&#10;package main&#10;&#10;import (&#10;&#9;&quot;database/sql&quot;&#10;&#9;&quot;fmt&quot;&#10;&#9;&quot;log&quot;&#10;&#10;&#9;_ &quot;github.com/go-sql-driver/mysql&quot;&#10;)&#10;&#10;// User 结构体表示用户信息&#10;type User struct {&#10;&#9;ID       int&#10;&#9;Phone    string&#10;&#9;Province string&#10;&#9;Balance  float64&#10;}&#10;&#10;func main() {&#10;&#9;// 数据库连接信息&#10;&#9;dsn := &quot;your_username:your_password@tcp(127.0.0.1:3306)/your_database&quot;&#10;&#10;&#9;// 打开数据库连接&#10;&#9;db, err := sql.Open(&quot;mysql&quot;, dsn)&#10;&#9;if err != nil {&#10;&#9;&#9;log.Fatal(&quot;Failed to open database connection:&quot;, err)&#10;&#9;}&#10;&#9;defer db.Close()&#10;&#10;&#9;// 测试数据库连接&#10;&#9;err = db.Ping()&#10;&#9;if err != nil {&#10;&#9;&#9;log.Fatal(&quot;Failed to ping database:&quot;, err)&#10;&#9;}&#10;&#9;fmt.Println(&quot;Connected to MySQL!&quot;)&#10;&#10;&#9;// 创建用户表&#10;&#9;createTable := `&#10;&#9;CREATE TABLE IF NOT EXISTS users (&#10;&#9;&#9;id INT AUTO_INCREMENT PRIMARY KEY,&#10;&#9;&#9;phone VARCHAR(15) NOT NULL,&#10;&#9;&#9;province VARCHAR(50),&#10;&#9;&#9;balance DOUBLE&#10;&#9;);&#10;&#9;`&#10;&#9;_, err = db.Exec(createTable)&#10;&#9;if err != nil {&#10;&#9;&#9;log.Fatal(&quot;Failed to create table:&quot;, err)&#10;&#9;}&#10;&#10;&#9;// 插入用户数据&#10;&#9;insertUser := `&#10;&#9;INSERT INTO users (phone, province, balance) VALUES (?, ?, ?);&#10;&#9;`&#10;&#9;result, err := db.Exec(insertUser, &quot;1234567890&quot;, &quot;Example Province&quot;, 1000.50)&#10;&#9;if err != nil {&#10;&#9;&#9;log.Fatal(&quot;Failed to insert user:&quot;, err)&#10;&#9;}&#10;&#10;&#9;lastInsertID, _ := result.LastInsertId()&#10;&#9;fmt.Println(&quot;Inserted user with ID:&quot;, lastInsertID)&#10;&#10;&#9;// 查询用户数据&#10;&#9;queryUser := `&#10;&#9;SELECT id, phone, province, balance FROM users WHERE id = ?;&#10;&#9;`&#10;&#9;var user User&#10;&#9;err = db.QueryRow(queryUser, lastInsertID).Scan(&amp;user.ID, &amp;user.Phone, &amp;user.Province, &amp;user.Balance)&#10;&#9;if err != nil {&#10;&#9;&#9;log.Fatal(&quot;Failed to query user:&quot;, err)&#10;&#9;}&#10;&#10;&#9;fmt.Printf(&quot;User found: %+v\n&quot;, user)&#10;&#10;&#9;// 更新用户数据&#10;&#9;updateUser := `&#10;&#9;UPDATE users SET balance = ? WHERE id = ?;&#10;&#9;`&#10;&#9;_, err = db.Exec(updateUser, 1500.75, lastInsertID)&#10;&#9;if err != nil {&#10;&#9;&#9;log.Fatal(&quot;Failed to update user:&quot;, err)&#10;&#9;}&#10;&#10;&#9;// 查询更新后的用户数据&#10;&#9;err = db.QueryRow(queryUser, lastInsertID).Scan(&amp;user.ID, &amp;user.Phone, &amp;user.Province, &amp;user.Balance)&#10;&#9;if err != nil {&#10;&#9;&#9;log.Fatal(&quot;Failed to query user:&quot;, err)&#10;&#9;}&#10;&#10;&#9;fmt.Printf(&quot;Updated user: %+v\n&quot;, user)&#10;&#10;&#9;// 删除用户数据&#10;&#9;deleteUser := `&#10;&#9;DELETE FROM users WHERE id = ?;&#10;&#9;`&#10;&#9;_, err = db.Exec(deleteUser, lastInsertID)&#10;&#9;if err != nil {&#10;&#9;&#9;log.Fatal(&quot;Failed to delete user:&quot;, err)&#10;&#9;}&#10;&#10;&#9;fmt.Println(&quot;User deleted.&quot;)&#10;&#10;&#9;// 最终关闭数据库连接&#10;}&#10;&#10;*/&#10;" description="总体笔记" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
</templateSet>